cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 20)

project(vrmlproc)

# Add Catch2 unit tests using FetchContent.
include(FetchContent)
FetchContent_Declare(
    Catch2
    GIT_REPOSITORY https://github.com/catchorg/Catch2.git
    GIT_TAG v3.4.0
)
FetchContent_MakeAvailable(Catch2)

# --------------------------------------------------------------------------------------- #

# Add source files and vendor dependencies.
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/src

    ${CMAKE_CURRENT_SOURCE_DIR}/src/core
    ${CMAKE_CURRENT_SOURCE_DIR}/src/core/errors
    ${CMAKE_CURRENT_SOURCE_DIR}/src/core/utils
    ${CMAKE_CURRENT_SOURCE_DIR}/src/core/logger

    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser
    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser/models
    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser/models/utils
    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser/interfaces
    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser/grammars
    ${CMAKE_CURRENT_SOURCE_DIR}/src/parser/services

    ${CMAKE_CURRENT_SOURCE_DIR}/src/conversion_context

    ${CMAKE_CURRENT_SOURCE_DIR}/src/actions

    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors
    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors/utils
    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors/errors
    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors/validators
    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors/validators/errors
    ${CMAKE_CURRENT_SOURCE_DIR}/src/traversors/handlers

    # ${CMAKE_CURRENT_SOURCE_DIR}/../vendor/pybind11/include/pybind11
    ${CMAKE_CURRENT_SOURCE_DIR}/../vendor/result
)

# Create the DLL.
add_library(vrmlproc SHARED

    "${CMAKE_CURRENT_SOURCE_DIR}/../vendor/result/result.hpp"

    # DLL export macro.

    "src/VrmlProcessingExport.hpp"

    # Core.

    "src/core/FileReader.hpp"
    "src/core/FileWriter.hpp"
    "src/core/SimpleFileReader.hpp"
    "src/core/SimpleFileReader.cpp"
    "src/core/MemoryMappedFileReader.hpp"
    "src/core/MemoryMappedFileReader.cpp"

    "src/core/errors/Error.hpp"
    "src/core/errors/NullPointerError.hpp"

    "src/core/utils/ScopedTimer.hpp"
    "src/core/utils/TypeToString.hpp"

    "src/core/logger/Logger.hpp"
    "src/core/logger/Logger.cpp"

    # Parser.

    "src/parser/models/VrmlUnits.hpp"
    "src/parser/models/VrmlFile.hpp"

    "src/parser/models/VrmlField.hpp"
    "src/parser/models/VrmlField.cpp"

    "src/parser/models/Vec3f.hpp"
    "src/parser/models/Vec3f.cpp"

    "src/parser/models/Vec4f.hpp"
    "src/parser/models/Vec4f.cpp"

    "src/parser/models/Vec3fArray.hpp"
    "src/parser/models/Vec3fArray.cpp"

    "src/parser/models/Int32Array.hpp"
    "src/parser/models/Int32Array.cpp"

    "src/parser/models/VrmlNode.hpp"
    "src/parser/models/VrmlNode.cpp"

    "src/parser/models/UseNode.hpp"
    "src/parser/models/UseNode.cpp"

    "src/parser/models/utils/VrmlFieldExtractor.hpp"

    "src/parser/services/VrmlNodeManager.hpp"
    "src/parser/services/VrmlNodeManager.cpp"

    "src/parser/interfaces/Printable.hpp"
    "src/parser/interfaces/Printable.cpp"

    "src/parser/Parser.hpp"
    "src/parser/ParserResult.hpp"
    "src/parser/VrmlParser.hpp"
    "src/parser/VrmlParser.cpp"

    "src/parser/grammars/BaseGrammar.hpp"
    "src/parser/grammars/CommentSkipper.hpp"
    "src/parser/grammars/IdentifierGrammar.hpp"
    "src/parser/grammars/Vec3fGrammar.hpp"
    "src/parser/grammars/Vec3fArrayGrammar.hpp"
    "src/parser/grammars/Vec4fGrammar.hpp"
    "src/parser/grammars/Int32ArrayGrammar.hpp"
    "src/parser/grammars/QuotedStringGrammar.hpp"
    "src/parser/grammars/BooleanGrammar.hpp"
    "src/parser/grammars/VrmlFileGrammar.hpp"

    # Conversion context.

    "src/conversion_context/BaseConversionContext.hpp"
    "src/conversion_context/Mergeable.hpp"
    "src/conversion_context/VectorConversionContext.hpp"
    "src/conversion_context/MeshConversionContext.hpp"
    "src/conversion_context/StlBaseStructure.hpp"

    # Traversors.

    "src/traversors/VrmlNodeTraversor.hpp"
    "src/traversors/VrmlNodeTraversor.cpp"
    "src/traversors/VrmlFileTraversor.hpp"
    "src/traversors/VrmlFileTraversor.cpp"
    "src/traversors/FullParsedVrmlNodeContext.hpp"
    "src/traversors/FullParsedVrmlFileContext.hpp"

    "src/traversors/errors/FileTraversorError.hpp"
    "src/traversors/errors/NodeTraversorError.hpp"

    "src/traversors/utils/ConversionContextActionExecutor.hpp"

    "src/traversors/handlers/ShapeHandler.hpp"
    "src/traversors/handlers/ShapeHandler.cpp"
    "src/traversors/handlers/GroupHandler.hpp"
    "src/traversors/handlers/GroupHandler.cpp"
    "src/traversors/handlers/WorldInfoHandler.hpp"
    "src/traversors/handlers/WorldInfoHandler.cpp"
    "src/traversors/handlers/BoxHandler.hpp"
    "src/traversors/handlers/BoxHandler.cpp"
    "src/traversors/handlers/SpotlightHandler.hpp"
    "src/traversors/handlers/SpotlightHandler.cpp"

    "src/traversors/validators/NodeValidator.hpp"
    "src/traversors/validators/BoxNodeValidator.hpp"
    "src/traversors/validators/WorldInfoNodeValidator.hpp"
    "src/traversors/validators/ShapeNodeValidator.hpp"
    "src/traversors/validators/GroupNodeValidator.hpp"

    "src/traversors/validators/errors/NodeValidationError.hpp"

    # Actions.

    "src/actions/ConversionContextActionMap.hpp"
    "src/actions/ConversionContextAction.hpp"
    "src/actions/GeometryAction.hpp"
    "src/actions/GroupAction.hpp"
    "src/actions/BoxAction.hpp"
    "src/actions/ShapeAction.hpp"
)

# Two build types - Debug and Release.
if(MSVC)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2 /DNDEBUG")
else()
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")
endif()

# Offer two macros based on the build type.
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_definitions(DEBUG)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_definitions(RELEASE)
endif()

# Explicitly link Boost::iostreams (problems with compilation on Linux with GNU 11.4.0).
target_link_libraries(vrmlproc PRIVATE Boost::iostreams Boost::log Boost::date_time Boost::log_setup Boost::system Boost::thread)

# --------------------------------------------------------------------------------------- #

# Create the Python bindings module.
#pybind11_add_module(pypyvrml SHARED bindings/MyLibBindings.cpp)

# Link pybind11 and Python libraries to the bindings module.
#target_link_libraries(pypyvrml PRIVATE
#    pyvrml
#)

# Add include directories for the bindings module.
#target_include_directories(pypyvrml PRIVATE
#    ${CMAKE_CURRENT_SOURCE_DIR}/src
#)

# --------------------------------------------------------------------------------------- #

# Add the test executables.
add_executable(VRMLFileGrammarUnitTests "tests/VRMLFileGrammarTest.cpp")
add_executable(Vec3fGrammarUnitTests "tests/Vec3fGrammarTest.cpp")
add_executable(Vec4fGrammarUnitTests "tests/Vec4fGrammarTest.cpp")
add_executable(Vec3fArrayGrammarUnitTests "tests/Vec3fArrayGrammarTest.cpp")
add_executable(Int32ArrayGrammarUnitTests "tests/Int32ArrayGrammarTest.cpp")
add_executable(VrmlFileTraversorUnitTests "tests/VrmlFileTraversorTest.cpp")
add_executable(VrmlFieldExtractorUnitTests "tests/VrmlFieldExtractorTest.cpp")
add_executable(VrmlNodeGrammarUnitTests "tests/VrmlNodeGrammarTest.cpp")

# Link Catch2 with the test executables.
target_link_libraries(VRMLFileGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(Vec3fGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(Vec4fGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(Vec3fArrayGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(Int32ArrayGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(VrmlFileTraversorUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(VrmlFieldExtractorUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)
target_link_libraries(VrmlNodeGrammarUnitTests PRIVATE Catch2::Catch2WithMain vrmlproc)

# Enable testing (use CTest to run the unit tests).
enable_testing()
add_test(NAME VRMLFileGrammarUnitTests COMMAND VRMLFileGrammarUnitTests)
add_test(NAME Vec3fGrammarUnitTests COMMAND Vec3fGrammarUnitTests)
add_test(NAME Vec4fGrammarUnitTests COMMAND Vec4fGrammarUnitTests)
add_test(NAME Vec3fArrayGrammarUnitTests COMMAND Vec3fArrayGrammarUnitTests)
add_test(NAME Int32ArrayGrammarUnitTests COMMAND Int32ArrayGrammarUnitTests)
add_test(NAME VrmlFileTraversorUnitTests COMMAND VrmlFileTraversorUnitTests)
add_test(NAME VrmlFieldExtractorUnitTests COMMAND VrmlFieldExtractorUnitTests)
add_test(NAME VrmlNodeGrammarUnitTests COMMAND VrmlNodeGrammarUnitTests)